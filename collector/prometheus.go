package collector

import (
	"fmt"
	"time"

	"github.com/develersrl/tachymeter"
	"github.com/prometheus/client_golang/prometheus"
)

type promCollector struct {
	avg    *prometheus.Desc
	min    *prometheus.Desc
	max    *prometheus.Desc
	stdDev *prometheus.Desc
	p50    *prometheus.Desc
	p75    *prometheus.Desc
	p95    *prometheus.Desc
	p99    *prometheus.Desc

	tachy *tachymeter.Tachymeter
}

// PromCollectorOpts defines the names and help strings for a prometheus
// collector created with NewPrometheusCollector.
type PromCollectorOpts struct {
	// If non-empty, each of the collected metrics is prefixed by the
	// provided string and an underscore ("_").
	Namespace string

	// MetricName is the name of the prometheus metric generated by the
	// collector. If empty, NewPrometheusCollector panics.
	MetricName string

	// MetricHelp is the help string of the prometheus metric generated by the
	// collector. If empty, NewPrometheusCollector panics.
	MetricHelp string
}

// NewPrometheusCollector returns a prometheus collector which exports the
// metrics gathered in the provided tachymeter.
func NewPrometheusCollector(tachy *tachymeter.Tachymeter, opts PromCollectorOpts) prometheus.Collector {
	if opts.MetricName == "" || opts.MetricHelp == "" {
		panic("Metric name and help must be set")
	}
	if tachy == nil {
		panic("Nil tachymeter")
	}

	ns := ""
	if opts.Namespace != "" {
		ns = opts.Namespace + "_"
	}

	return &promCollector{
		tachy:  tachy,
		avg:    descFromName(ns, opts.MetricName, opts.MetricHelp, "avg", "Average"),
		min:    descFromName(ns, opts.MetricName, opts.MetricHelp, "min", "Minimum"),
		max:    descFromName(ns, opts.MetricName, opts.MetricHelp, "max", "Maximum"),
		stdDev: descFromName(ns, opts.MetricName, opts.MetricHelp, "stddev", "Standard deviation"),
		p50:    descFromName(ns, opts.MetricName, opts.MetricHelp, "p50", "50th %ile"),
		p75:    descFromName(ns, opts.MetricName, opts.MetricHelp, "p75", "75th %ile"),
		p95:    descFromName(ns, opts.MetricName, opts.MetricHelp, "p95", "95th %ile"),
		p99:    descFromName(ns, opts.MetricName, opts.MetricHelp, "p99", "99th %ile"),
	}
}

// Describe returns all descriptions of the collector.
func (c *promCollector) Describe(ch chan<- *prometheus.Desc) {
	ch <- c.avg
	ch <- c.min
	ch <- c.max
	ch <- c.stdDev
	ch <- c.p50
	ch <- c.p75
	ch <- c.p95
	ch <- c.p99
}

const secondDiv = float64(time.Second)

// Collect returns the current state of all metrics of the collector.
func (c *promCollector) Collect(ch chan<- prometheus.Metric) {
	// calculate the tachymeter metrics
	m := c.tachy.Calc()

	ch <- prometheus.MustNewConstMetric(c.avg, prometheus.GaugeValue, float64(m.Time.Avg)/secondDiv)
	ch <- prometheus.MustNewConstMetric(c.min, prometheus.GaugeValue, float64(m.Time.Min)/secondDiv)
	ch <- prometheus.MustNewConstMetric(c.max, prometheus.GaugeValue, float64(m.Time.Max)/secondDiv)
	ch <- prometheus.MustNewConstMetric(c.stdDev, prometheus.GaugeValue, float64(m.Time.StdDev)/secondDiv)
	ch <- prometheus.MustNewConstMetric(c.p50, prometheus.GaugeValue, float64(m.Time.P50)/secondDiv)
	ch <- prometheus.MustNewConstMetric(c.p75, prometheus.GaugeValue, float64(m.Time.P75)/secondDiv)
	ch <- prometheus.MustNewConstMetric(c.p95, prometheus.GaugeValue, float64(m.Time.P95)/secondDiv)
	ch <- prometheus.MustNewConstMetric(c.p99, prometheus.GaugeValue, float64(m.Time.P99)/secondDiv)
}

func descFromName(ns, metricName, metricHelp, kindName, kindHelp string) *prometheus.Desc {
	return prometheus.NewDesc(
		fmt.Sprintf("%s%s_%s_seconds", ns, metricName, kindName),
		fmt.Sprintf("%s (%s)", metricHelp, kindHelp),
		nil, nil,
	)
}
